// pages/admin/reports.tsx
import React, { useEffect, useRef, useMemo, useState } from "react";
import Layout from "@/components/Layout";
import Chart from "chart.js/auto";
import { Edit, Trash, File, Move } from "lucide-react";

// 1) Import TanStack Table and pagination icons:
import {
  useReactTable,
  getCoreRowModel,
  getPaginationRowModel,
  ColumnDef,
  flexRender,
} from "@tanstack/react-table";
import {
  ChevronsLeft,
  ChevronLeft,
  ChevronRight,
  ChevronsRight,
} from "lucide-react";

// Define a type for the report rows
type RecentReport = {
  report: string;
  generatedBy: string;
  date: string;
};

const ReportsPage: React.FC = () => {
  // 2) State for 'Recent Reports' table
  const [reports, setReports] = useState<RecentReport[]>([
    {
      report: "User Engagement Report",
      generatedBy: "Admin",
      date: "Feb 21, 2025",
    },
    {
      report: "Exam Performance Report",
      generatedBy: "Admin",
      date: "Feb 20, 2025",
    },
    // Add more rows if desired
  ]);

  // For the User Growth line chart
  const userChartRef = useRef<HTMLCanvasElement>(null);
  // For the Revenue Trends bar chart
  const revenueChartRef = useRef<HTMLCanvasElement>(null);

  useEffect(() => {
    // Initialize User Growth Chart
    if (userChartRef.current) {
      new Chart(userChartRef.current, {
        type: "line",
        data: {
          labels: ["Jan", "Feb", "Mar", "Apr", "May", "Jun"],
          datasets: [
            {
              label: "New Users",
              data: [300, 400, 600, 800, 900, 1200],
              backgroundColor: "rgba(54, 162, 235, 0.2)",
              borderColor: "rgba(54, 162, 235, 1)",
              borderWidth: 2,
            },
          ],
        },
      });
    }

    // Initialize Revenue Trends Chart
    if (revenueChartRef.current) {
      new Chart(revenueChartRef.current, {
        type: "bar",
        data: {
          labels: ["Week 1", "Week 2", "Week 3", "Week 4"],
          datasets: [
            {
              label: "Revenue ($)",
              data: [4000, 5000, 6000, 7000],
              backgroundColor: "#4caf50",
            },
          ],
        },
      });
    }
  }, []);

  // 3) Columns definition for TanStack Table
  const columns = useMemo<ColumnDef<RecentReport>[]>(
    () => [
      {
        id: "actions",
        header: "",
        cell: ({ row }) => {
          return (
            <button className="text-gray-600 hover:text-gray-900">
              <Move size={16} />
            </button>
          );
        },
      },
      {
        accessorKey: "report",
        header: "Report",
      },
      {
        accessorKey: "generatedBy",
        header: "Generated By",
      },
      {
        accessorKey: "date",
        header: "Date",
      },
      {
        id: "actions",
        header: "Action",
        cell: () => (
          <>
            <button className="mr-2 text-blue-600 hover:text-blue-900">
              <Edit size={16} />
            </button>

            <button className="mr-2 text-green-600 hover:text-green-900">
              <File size={16} />
            </button>

            <button className="text-red-600 hover:text-red-900">
              {" "}
              <Trash size={16} />{" "}
            </button>
          </>
        ),
      },
    ],
    []
  );

  // 4) Create table instance with pagination
  const table = useReactTable({
    data: reports,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    initialState: {
      pagination: {
        pageSize: 5, // default items per page
      },
    },
  });

  return (
    <Layout>
      <div className="flex flex-col p-6">
        <main className="flex-1">
          <h2 className="text-3xl font-bold mb-6">
            <i className="fas fa-chart-line mr-2"></i> Reports
          </h2>

          {/* Filters & Export Options */}
          <div className="mb-4 flex justify-between">
            <input
              type="text"
              placeholder="Search reports..."
              className="px-4 py-2 w-2/3 rounded-lg border"
            />
            <button
              onClick={() => alert("Exporting Reports as CSV")}
              className="px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600"
            >
              <i className="fas fa-file-csv mr-2"></i> Export CSV
            </button>
            <button
              onClick={() => alert("Exporting Reports as PDF")}
              className="px-4 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600"
            >
              <i className="fas fa-file-pdf mr-2"></i> Export PDF
            </button>
          </div>

          {/* Dashboard Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-6">
            <div className="bg-white p-6 rounded-lg shadow-md flex items-center">
              <i className="fas fa-users fa-2x text-blue-500"></i>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Total Users</h3>
                <p className="text-2xl font-bold">12,450</p>
              </div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md flex items-center">
              <i className="fas fa-dollar-sign fa-2x text-green-500"></i>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Total Revenue</h3>
                <p className="text-2xl font-bold">$56,340</p>
              </div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md flex items-center">
              <i className="fas fa-clock fa-2x text-yellow-500"></i>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Avg. Engagement Time</h3>
                <p className="text-2xl font-bold">15 min</p>
              </div>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md flex items-center">
              <i className="fas fa-check-circle fa-2x text-red-500"></i>
              <div className="ml-4">
                <h3 className="text-lg font-semibold">Completed Exams</h3>
                <p className="text-2xl font-bold">4,298</p>
              </div>
            </div>
          </div>

          {/* Charts */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h3 className="text-xl font-semibold mb-4">
                <i className="fas fa-chart-line mr-2"></i> User Growth
              </h3>
              <canvas ref={userChartRef}></canvas>
            </div>
            <div className="bg-white p-6 rounded-lg shadow-md">
              <h3 className="text-xl font-semibold mb-4">
                <i className="fas fa-chart-bar mr-2"></i> Revenue Trends
              </h3>
              <canvas ref={revenueChartRef}></canvas>
            </div>
          </div>

          {/* Recent Reports Table (with pagination) */}
          <div className="bg-white p-6 rounded-lg shadow-md">
            <h3 className="text-xl font-semibold mb-4">
              <i className="fas fa-list mr-2"></i> Recent Reports
            </h3>
            <table className="w-full border-collapse">
              <thead>
                {table.getHeaderGroups().map((headerGroup) => (
                  <tr key={headerGroup.id} className="border-b text-left">
                    {headerGroup.headers.map((header) => (
                      <th key={header.id} className="p-3">
                        {header.isPlaceholder
                          ? null
                          : flexRender(
                              header.column.columnDef.header,
                              header.getContext()
                            )}
                      </th>
                    ))}
                  </tr>
                ))}
              </thead>
              <tbody>
                {table.getRowModel().rows.map((row) => (
                  <tr key={row.id} className="border-b">
                    {row.getVisibleCells().map((cell) => (
                      <td key={cell.id} className="p-3">
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </td>
                    ))}
                  </tr>
                ))}
              </tbody>
            </table>

            {/* Pagination Controls */}
            <div className="flex flex-col sm:flex-row justify-between items-center mt-4 text-sm text-gray-700">
              {/* Items per page dropdown */}
              <div className="flex items-center mb-4 sm:mb-0">
                <span className="mr-2">Items per page</span>
                <select
                  className="border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2"
                  value={table.getState().pagination.pageSize}
                  onChange={(e) => {
                    table.setPageSize(Number(e.target.value));
                  }}
                >
                  {[5, 10, 20, 30].map((pageSize) => (
                    <option key={pageSize} value={pageSize}>
                      {pageSize}
                    </option>
                  ))}
                </select>
              </div>

              {/* Page navigation */}
              <div className="flex items-center space-x-2">
                <button
                  className="p-2 rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
                  onClick={() => table.setPageIndex(0)}
                  disabled={!table.getCanPreviousPage()}
                >
                  <ChevronsLeft size={20} />
                </button>
                <button
                  className="p-2 rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
                  onClick={() => table.previousPage()}
                  disabled={!table.getCanPreviousPage()}
                >
                  <ChevronLeft size={20} />
                </button>
                <span className="flex items-center">
                  <input
                    min={1}
                    max={table.getPageCount()}
                    type="number"
                    value={table.getState().pagination.pageIndex + 1}
                    onChange={(e) => {
                      const page = e.target.value
                        ? Number(e.target.value) - 1
                        : 0;
                      table.setPageIndex(page);
                    }}
                    className="w-16 p-2 rounded-md border border-gray-300 text-center"
                  />
                  <span className="ml-1">of {table.getPageCount()}</span>
                </span>
                <button
                  className="p-2 rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
                  onClick={() => table.nextPage()}
                  disabled={!table.getCanNextPage()}
                >
                  <ChevronRight size={20} />
                </button>
                <button
                  className="p-2 rounded-md bg-gray-100 text-gray-600 hover:bg-gray-200 disabled:opacity-50"
                  onClick={() => table.setPageIndex(table.getPageCount() - 1)}
                  disabled={!table.getCanNextPage()}
                >
                  <ChevronsRight size={20} />
                </button>
              </div>
            </div>
          </div>
        </main>
      </div>
    </Layout>
  );
};

export default ReportsPage;
